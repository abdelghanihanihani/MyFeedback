"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var sidedrawer_1 = require("nativescript-pro-ui/sidedrawer");
var angular_1 = require("nativescript-pro-ui/sidedrawer/angular");
var employee_service_1 = require("./../services/employee/employee.service");
var project_service_1 = require("./../services/project/project.service");
var feedback_service_1 = require("./../services/feedback/feedback.service");
var PubfComponent = /** @class */ (function () {
    //ErrorOther:boolean= this.other=="";
    function PubfComponent(EmployeeService, ProjectService, FeedbackService) {
        var _this = this;
        this.EmployeeService = EmployeeService;
        this.ProjectService = ProjectService;
        this.FeedbackService = FeedbackService;
        this.selectedContextType = 0;
        this.selectedContext = 0;
        this.selectedType = 0;
        this.selectedMode = 0;
        this.Modes = ["Public", "Private", "Personalized"];
        this.Types = ["Positive", "NÃ©gative"];
        this.ListOfContexts = ["Employee", "Project", "Other"];
        this.Contexts = [];
        this.Targets = [this.EmployeeService.getEmployee()];
        this.Other = false;
        this.Context = "Employee :";
        this.ErrorOther = false;
        this.List = false;
        this.feedback = { id: null, contextType: 'Employee', context: '', type: 'Positive', mode: 'Public', value: '', date: '', targets: null };
        // fdpb:{id_e:number,feedback:Feedback}={id_e:null,feedback:this.feedback};
        // list:Array<{status:boolean,employee:Employee}>=[];
        this.count = 0;
        this.isBusy = false;
        this.selectedContext == 0;
        // this.Contexts=[];
        this.feedback.targets = [];
        this.EmployeeService.getAllEmployees().subscribe(function (next) {
            _this.ListOfEmployee = next;
            for (var i = 0; i <= _this.ListOfEmployee.length; i++) {
                _this.Contexts.push(_this.ListOfEmployee[i].firstname + " " + _this.ListOfEmployee[i].lastname);
                _this.Targets.push(_this.ListOfEmployee[i].id);
                // this.list[i].status=false;
                // this.list[i].employee=this.ListOfEmployee[i];
            }
        });
        this.ProjectService.getAllProjects().subscribe(function (next) { _this.ListOfProjects = next; });
    }
    PubfComponent.prototype.ngOnInit = function () {
        this._sideDrawerTransition = new sidedrawer_1.SlideInOnTopTransition();
    };
    Object.defineProperty(PubfComponent.prototype, "sideDrawerTransition", {
        get: function () {
            return this._sideDrawerTransition;
        },
        enumerable: true,
        configurable: true
    });
    PubfComponent.prototype.onDrawerButtonTap = function () {
        this.drawerComponent.sideDrawer.showDrawer();
    };
    PubfComponent.prototype.OnChangeContextType = function (args) {
        if (args.newIndex == 0) {
            this.feedback.contextType = this.ListOfContexts[args.newIndex];
            this.Context = "Employee :";
            this.Other = false;
            this.Contexts = [];
            for (var i = 0; i <= this.ListOfEmployee.length; i++) {
                this.Contexts.push(this.ListOfEmployee[i].firstname + " " + this.ListOfEmployee[i].lastname);
            }
        }
        else if (args.newIndex == 1) {
            this.feedback.contextType = this.ListOfContexts[args.newIndex];
            this.Context = "Project :";
            this.Other = false;
            this.Contexts = [];
            for (var i = 0; i <= this.ListOfProjects.length; i++) {
                this.Contexts.push(this.ListOfProjects[i].name);
            }
        }
        else if (args.newIndex == 2) {
            //this.feedback.context=this.other;
            this.Other = true;
            this.ErrorOther = true;
            this.feedback.contextType = this.ListOfContexts[args.newIndex];
        }
    };
    PubfComponent.prototype.onTextChange = function (args) {
        var textField = args.object;
        this.other = textField.text;
    };
    PubfComponent.prototype.OnChangeContext = function (args) {
        this.feedback.context = this.Contexts[args.newIndex];
    };
    PubfComponent.prototype.OnChangeType = function (args) {
        this.feedback.type = this.Types[args.newIndex];
    };
    PubfComponent.prototype.OnChangeMode = function (args) {
        this.feedback.mode = this.Modes[args.newIndex];
        if (args.newIndex == 0) {
            this.Targets = [this.EmployeeService.getEmployee()];
            for (var i = 0; i <= this.ListOfEmployee.length; i++) {
                this.Targets.push(this.ListOfEmployee[i].id);
            }
        }
        else if (args.newIndex == 1) {
            this.Targets = [this.EmployeeService.getEmployee()];
        }
        else if (args.newIndex == 2) {
            this.Targets = [this.EmployeeService.getEmployee()];
            this.count = this.Targets.length;
            this.List = true;
        }
    };
    PubfComponent.prototype.onSetupItemView = function (args) {
        args.view.context.third = (args.index % 3 === 0);
    };
    PubfComponent.prototype.onItemTap = function (args) {
        //this.isTaped=!this.isTaped;
        // if((this.list[args.index].status==false)&&(this.list[args.index].employee==this.ListOfEmployee[args.index]))
        // {this.list[args.index].status=! this.list[args.index].status;
        //     this.isTaped=true;}
        //alert(args.view);
        this.isAdded = this.searchById(this.ListOfEmployee[args.index].id);
        if (this.isAdded == -1) {
            this.Targets.push(this.ListOfEmployee[args.index].id);
            this.count = this.Targets.length;
        }
        else {
            this.Targets.splice(this.isAdded, 1);
            alert({ title: "Remind", message: this.ListOfEmployee[args.index].firstname + " " + this.ListOfEmployee[args.index].lastname + " is removed", okButtonText: "OK" });
            this.count = this.Targets.length;
        }
        //    alert('Item with index: ' + args.index + ' tapped');
    };
    PubfComponent.prototype.submit = function (text) {
        if (text == '') {
            this.ErrorOther = true;
        }
        else {
            this.other = text;
            this.ErrorOther = false;
        }
    };
    PubfComponent.prototype.reset = function () {
        this.Context = "Employee :";
        this.selectedContext = 0;
        this.other = '';
        this.selectedType = 0;
        this.selectedMode = 0;
        this.feedback.value = '';
        this.resetTargets();
        this.selectedContextType = 0;
        this.Other = false;
        this.Contexts = [];
        for (var i = 0; i <= this.ListOfEmployee.length; i++) {
            this.Contexts.push(this.ListOfEmployee[i].firstname + " " + this.ListOfEmployee[i].lastname);
        }
    };
    PubfComponent.prototype.publish = function () {
        var _this = this;
        if (this.feedback.contextType == 'Other') {
            this.feedback.context = this.other;
        }
        var date = new Date();
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();
        this.feedback.date = day + '/' + month + '/' + year;
        // this.Targets.push(this.EmployeeService.getEmployee());
        this.feedback.targets = this.Targets;
        //this.feedback.context=this.other;
        //this.fdpb.id_e=this.EmployeeService.getEmployee();
        this.isBusy = true;
        this.FeedbackService.addFeedback(this.feedback).subscribe(function (next) {
            _this.isBusy = false;
            alert("Your feedback is added successfully");
        }, 
        //alert(JSON.stringify(next));},
        function (error) {
            _this.isBusy = false;
            alert("Unfortunately we were unable to add your feedback.");
        });
    };
    PubfComponent.prototype.finish = function () {
        this.List = false;
        if (this.Targets.length == 0) {
            this.selectedMode = 0;
            for (var i = 0; i <= this.ListOfEmployee.length; i++) {
                this.Targets.push(this.ListOfEmployee[i].id);
            }
        }
        else {
            this.selectedMode = 2;
            // this.feedback.targets=this.Targets
        }
    };
    PubfComponent.prototype.resetTargets = function () {
        this.Targets = [this.EmployeeService.getEmployee()];
        this.count = this.Targets.length;
    };
    PubfComponent.prototype.searchById = function (id) {
        var i = 0;
        while ((this.Targets[i] != id) && (i <= this.Targets.length)) {
            i++;
        }
        if (i > this.Targets.length) {
            return -1;
        }
        else {
            return i;
        }
    };
    __decorate([
        core_1.ViewChild("CB1"),
        __metadata("design:type", core_1.ElementRef)
    ], PubfComponent.prototype, "FirstCheckBox", void 0);
    __decorate([
        core_1.ViewChild("drawer"),
        __metadata("design:type", angular_1.RadSideDrawerComponent)
    ], PubfComponent.prototype, "drawerComponent", void 0);
    PubfComponent = __decorate([
        core_1.Component({
            selector: "Pubf",
            moduleId: module.id,
            templateUrl: "./Pubf.component.html",
            styleUrls: ["./Pubf.component.css"],
            providers: [employee_service_1.EmployeeService, project_service_1.ProjectService, feedback_service_1.FeedbackService]
        }),
        __metadata("design:paramtypes", [employee_service_1.EmployeeService, project_service_1.ProjectService, feedback_service_1.FeedbackService])
    ], PubfComponent);
    return PubfComponent;
}());
exports.PubfComponent = PubfComponent;
//# sourceMappingURL=data:application/json;base64,