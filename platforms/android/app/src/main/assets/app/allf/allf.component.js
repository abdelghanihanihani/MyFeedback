"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var sidedrawer_1 = require("nativescript-pro-ui/sidedrawer");
var angular_1 = require("nativescript-pro-ui/sidedrawer/angular");
var feedback_service_1 = require("./../services/feedback/feedback.service");
var employee_service_1 = require("./../services/employee/employee.service");
var AllfComponent = /** @class */ (function () {
    function AllfComponent(FeedbackService, EmployeeService) {
        this.FeedbackService = FeedbackService;
        this.EmployeeService = EmployeeService;
        this.ListOfFds = [];
        this.ContextType = ['Employee', 'Project', 'Other'];
        this.selectedContextType = 0;
        this.date = new Date();
        this.currentDay = this.date.getDate();
        this.currentMonth = this.date.getMonth() + 1;
        this.currentYear = this.date.getFullYear();
        this.isBusy = false;
        this.isNothing = false;
    }
    AllfComponent.prototype.ngOnInit = function () {
        this._sideDrawerTransition = new sidedrawer_1.SlideInOnTopTransition();
        this.ListOfFds = [];
        this.isContext = false;
        this.isDate = false;
    };
    Object.defineProperty(AllfComponent.prototype, "sideDrawerTransition", {
        get: function () {
            return this._sideDrawerTransition;
        },
        enumerable: true,
        configurable: true
    });
    AllfComponent.prototype.onDrawerButtonTap = function () {
        this.drawerComponent.sideDrawer.showDrawer();
    };
    AllfComponent.prototype.onDateChanged = function (args) {
        this.date = args.value;
        var day = this.date.getDate();
        var month = this.date.getMonth() + 1;
        var year = this.date.getFullYear();
        this.DateFd = day + '/' + month + '/' + year;
        this.getAllFDById(this.DateFd);
    };
    AllfComponent.prototype.OnChangeContextType = function (args) {
        if (args.newIndex == 0) {
            this.getAllFEById();
        }
        else if (args.newIndex == 1) {
            this.getAllFPById();
        }
        else if (args.newIndex == 2) {
            this.getAllFOById();
        }
    };
    AllfComponent.prototype.bydate = function () {
        this.date = new Date();
        this.isContext = false;
        var day = this.date.getDate();
        var month = this.date.getMonth() + 1;
        var year = this.date.getFullYear();
        this.DateFd = day + '/' + month + '/' + year;
        this.getAllFDById(this.DateFd);
        //this.ListOfFds=[];
        this.isDate = !this.isDate;
    };
    AllfComponent.prototype.bycontext = function () {
        this.isDate = false;
        this.isContext = !this.isContext;
        if (this.isContext == true) {
            this.getAllFEById();
            this.selectedContextType == 0;
        }
        else {
            this.ListOfFds = [];
        }
    };
    AllfComponent.prototype.getAllFEById = function () {
        var _this = this;
        this.isBusy = true;
        this.FeedbackService.getAllFEById(this.EmployeeService.getEmployee()).subscribe(function (next) {
            _this.ListOfFds = next;
            _this.isNothing = _this.ListOfFds.length == 0;
            _this.isBusy = false;
        });
    };
    AllfComponent.prototype.getAllFPById = function () {
        var _this = this;
        this.isBusy = true;
        this.FeedbackService.getAllFPById(this.EmployeeService.getEmployee()).subscribe(function (next) {
            _this.ListOfFds = next;
            _this.isNothing = _this.ListOfFds.length == 0;
            _this.isBusy = false;
        });
    };
    AllfComponent.prototype.getAllFOById = function () {
        var _this = this;
        this.isBusy = true;
        this.FeedbackService.getAllFOById(this.EmployeeService.getEmployee()).subscribe(function (next) {
            _this.ListOfFds = next;
            _this.isNothing = _this.ListOfFds.length == 0;
            _this.isBusy = false;
        });
    };
    AllfComponent.prototype.getAllFDById = function (DateFd) {
        var _this = this;
        this.isBusy = true;
        this.FeedbackService.getAllFDById(this.EmployeeService.getEmployee(), DateFd).subscribe(function (next) {
            _this.ListOfFds = next;
            _this.isNothing = _this.ListOfFds.length == 0;
            _this.isBusy = false;
        });
    };
    AllfComponent.prototype.onItemTap = function (args) {
        this.isFeedback = true;
        this.feedback = this.ListOfFds[args.index];
    };
    AllfComponent.prototype.OK = function () {
        this.isFeedback = false;
    };
    __decorate([
        core_1.ViewChild("drawer"),
        __metadata("design:type", angular_1.RadSideDrawerComponent)
    ], AllfComponent.prototype, "drawerComponent", void 0);
    AllfComponent = __decorate([
        core_1.Component({
            selector: "Allf",
            moduleId: module.id,
            templateUrl: "./allf.component.html",
            styleUrls: ["./allf.component.css"],
            providers: [feedback_service_1.FeedbackService, employee_service_1.EmployeeService]
        }),
        __metadata("design:paramtypes", [feedback_service_1.FeedbackService, employee_service_1.EmployeeService])
    ], AllfComponent);
    return AllfComponent;
}());
exports.AllfComponent = AllfComponent;
//# sourceMappingURL=data:application/json;base64,